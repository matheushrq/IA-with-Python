# -*- coding: utf-8 -*-
"""AlgoritmoHillClimbing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsbPLDAPJzkF5DtOu-ThEDHLARU_uHbs
"""

# são as pessoas das respectivas cidades
pessoas = [('Lisboa', 'LIS'),
           ('Madrid', 'MAD'),
           ('Paris', 'CDG'),
           ('Dublin', 'DUB'),
           ('Bruxelas', 'BRU'),
           ('Londres', 'LHR')]

destino = 'FCO' #Roma - todas vao para Roma

# Estrutura que varre o arquivo dos voos separados por virgula
voos = {}
for linha in open('/content/horariosdevoos.txt'):
  origem, destino, saida, chegada, preco = linha.split(',')
  voos.setdefault((origem,destino),[])
  voos[(origem, destino)].append((saida, chegada, int(preco)))

#Lista os voos
voos

#imprime os voos a partir da agenda --> ida, volta e o preço total 
def imprimir_voos(agenda):
  id_voo = -1
  total_preco = 0
  for i in range(len(agenda) //2):
    nome = pessoas[i][0]
    origem = pessoas[i][1]
    id_voo +=1
    ida = voos[(origem, destino)][agenda[id_voo]]
    total_preco += ida[2]
    id_voo+=1
    volta = voos[(destino, origem)][agenda[id_voo]]
    total_preco+= volta[2]
    print('%10s %10s  %5s-%5s %3s %5s-%5s %3s' % (nome, origem, ida[0], ida[1],ida[2], volta[0], volta[1], volta[2]))
    
  print('Preco total: ', total_preco)

agenda = [1,7 ,0,7, 4,0, 5,2, 6,2, 4,0] #agenda inventada, só para testes
imprimir_voos(agenda)

!pip install mlrose #biblioteca de algoritmos de busca

import mlrose

# função fitness
def fitness_function(agenda):
  id_voo = -1
  total_preco = 0
  for i in range(len(agenda) //2):
    nome = pessoas[i][0]
    origem = pessoas[i][1]
    id_voo +=1
    ida = voos[(origem, destino)][agenda[id_voo]]
    total_preco += ida[2]
    id_voo+=1
    volta = voos[(destino, origem)][agenda[id_voo]]
    total_preco+= volta[2]
  
  return total_preco

# passa a função fitness para a biblioteca. A função é personalizada
fitness = mlrose.CustomFitness(fitness_function)

# Define o problema. DiscreteOpt --> numeros inteiros é o mesmo que discreto
# length --> tamanho da agenda, maximize ou minimize. Neste caso é minimizar. Max_val --> quantidade de voos disponíveis para cada cidade
problema = mlrose.DiscreteOpt(length=12, fitness_fn=fitness, maximize=False,max_val=10)

# Chama o algoritmo Hill Climb para minimizar uma solução otima.
melhor_solucao, melhor_custo = mlrose.hill_climb(problema, random_state=1)
melhor_solucao, melhor_custo

imprimir_voos(melhor_solucao) # imprime a solução encontrada pelo algoritmo.



"""Simulated Annealing"""

melhor_solucao, melhor_custo = mlrose.simulated_annealing(problema, schedule=mlrose.decay.GeomDecay(init_temp = 1000), random_state = 2)
melhor_solucao, melhor_custo

"""Algoritmo Genético"""

melhor_solucao, melhor_custo = mlrose.genetic_alg(problema, pop_size=500, mutation_prob=0.2)
melhor_solucao, melhor_custo